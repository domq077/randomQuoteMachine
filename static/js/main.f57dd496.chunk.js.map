{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","setError","setIsLoaded","author","setAuthor","quote","setQuote","useEffect","fetch","then","res","json","result","random","Math","floor","length","error","prevQuoteRef","useRef","prevAuthorRef","current","prevQuote","prevAuthor","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAkFeA,MA/Ef,WACE,MAA0BC,mBAAS,MAAnC,mBAAcC,GAAd,WACA,EAAgCD,oBAAS,GAAzC,mBAAiBE,GAAjB,WACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAGAC,qBAAU,WACRC,MAAM,yIACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCV,GAAY,GACZ,IAAIW,EAASC,KAAKC,MAAMD,KAAKD,SAAWD,EAAOI,QAC/CV,EAASM,EAAOC,GAAQR,OACxBD,EAAUQ,EAAOC,GAAQV,WAE3B,SAACc,GACCf,GAAY,GACZD,EAASgB,QAGZ,IAGH,IAkBMC,EAAeC,mBACfC,EAAgBD,mBACtBZ,qBAAU,WACRW,EAAaG,QAAUhB,EACvBe,EAAcC,QAAUlB,IACvB,CAACA,IACJ,IAAMmB,EAAYJ,EAAaG,QACzBE,EAAaH,EAAcC,QAMjC,OACE,sBAAKG,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,kCACA,sBAAKA,UAAU,QAAf,UACE,oBAAGA,UAAU,cAAb,mBAAmCnB,EAAnC,YACA,oBAAGmB,UAAU,gBAAb,cAA+BrB,KAC/B,wBACAqB,UAAU,MACVC,QAvCmB,WACvBjB,MAAM,yIACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCV,GAAY,GACZ,IAAIW,EAASC,KAAKC,MAAMD,KAAKD,SAAWD,EAAOI,QAC/CV,EAASM,EAAOC,GAAQR,OACxBD,EAAUQ,EAAOC,GAAQV,WAE3B,SAACc,GACCf,GAAY,GACZD,EAASgB,OAyBT,uBAMF,wBACEO,UAAU,MACVC,QAnBa,WACjBnB,EAASgB,GACTlB,EAAUmB,IAeR,qCC3DSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f57dd496.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [author, setAuthor] = useState('');\n  const [quote, setQuote] = useState('');\n  \n  //fetch data first time\n  useEffect(() => {\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n    .then(res => res.json())\n    .then(\n      (result) => {\n        setIsLoaded(true);\n        let random = Math.floor(Math.random() * result.length);\n        setQuote(result[random].quote);\n        setAuthor(result[random].author);\n      },\n      (error) => {\n        setIsLoaded(true);\n        setError(error);\n      }\n    )\n  }, []);\n\n  //generate new quote - fetch data again\n  const generateNewQuote = () => {\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n    .then(res => res.json())\n    .then(\n      (result) => {\n        setIsLoaded(true);\n        let random = Math.floor(Math.random() * result.length);\n        setQuote(result[random].quote);\n        setAuthor(result[random].author);\n      },\n      (error) => {\n        setIsLoaded(true);\n        setError(error);\n      }\n    )\n  }\n\n  //back to previous qoute\n  const prevQuoteRef = useRef();\n  const prevAuthorRef = useRef();\n  useEffect(() => {\n    prevQuoteRef.current = quote;\n    prevAuthorRef.current = author;\n  }, [author]);\n  const prevQuote = prevQuoteRef.current;\n  const prevAuthor = prevAuthorRef.current;\n  const backToPrev = () => {\n    setQuote(prevQuote);\n    setAuthor(prevAuthor);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Random Quote Machine</h1>\n      <div className=\"quote\">\n        <p className=\"quote__text\">&bdquo;{quote}&rdquo;</p>\n        <p className=\"quote__author\">~{author}</p>\n        <button \n        className=\"btn\"\n        onClick={generateNewQuote}\n      >\n        New quote\n      </button>\n      <button \n        className=\"btn\"\n        onClick={backToPrev}\n      >\n        Back to previous\n      </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}